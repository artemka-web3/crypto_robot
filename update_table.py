import analytics
import aioschedule
import asyncio
import gspread_formatting as gsf
from signals_json import read_json
from combo import get_historical_data
from datetime import datetime, timedelta
from config import *

col_arr =  ["I", 'J', 'K']

async def update_analytics():
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º Google Sheets –∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print('–ü—Ä–æ—Ö–æ–¥ –ø–æ —Å–∏–≥–∞–Ω–∞–ª–∞–º')
    data = ws.get_all_values(returnas='matrix')

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    header = data[0]
    data = data[63:]

    # –ò–Ω–¥–µ–∫—Å—ã —Å—Ç–æ–ª–±—Ü–æ–≤
    ticker_idx = header.index('–¢–∏–∫–µ—Ä')
    signal_type_idx = header.index('–¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞')
    take_profit_idx = header.index('–¢–µ–π–∫ –ø—Ä–æ—Ñ–∏—Ç')
    stop_loss_idx = header.index('–°—Ç–æ–ø –ª–æ—Å—Å')
    time_idx = header.index('–í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–∞')
    result_idx = header.index('–†–µ–∑—É–ª—å—Ç–∞—Ç')
    time_result_idx = header.index('–í—Ä–µ–º—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏ (–¥–∞—Ç–∞+ —á–∞—Å—ã:–º–∏–Ω—É—Ç—ã) ')
    deadline_idx = header.index('–°—Ä–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
    try:
        for row in data:
            
            ticker = row[ticker_idx]
            signal_type = row[signal_type_idx]
            take_profit = float(row[take_profit_idx])
            stop_loss = float(row[stop_loss_idx])
            entry_time = datetime.strptime(row[time_idx], "%Y-%m-%d %H:%M")
            current_time = datetime.now()
            #deadline = entry_time + timedelta(hours=int(row[deadline_idx]))

            historical_data = get_historical_data(ticker, '4h', 200, bitget)
            entry_price = historical_data['close'].iloc[-1]

            if signal_type == 'üî¥ SHORT':
                if entry_price >= stop_loss:
                    row[result_idx] = '–í—ã–±–∏—Ç–æ –ø–æ —Å—Ç–æ–ø –ª–æ—Å—Å—É'
                    row[time_result_idx] = current_time.strftime("%Y-%m-%d %H:%M")
                    row[deadline_idx] = int((current_time - entry_time).total_seconds() / 60)
                    background_color = (1, 0.8, 0.8)  # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω
                    text_color = (0.4, 0, 0, 1.0)  # –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç
                    set_cell_colors(background_color, text_color, data, row)

                elif entry_price <= take_profit:
                    row[result_idx] = '–°–¥–µ–ª–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
                    row[time_result_idx] = current_time.strftime("%Y-%m-%d %H:%M")
                    row[deadline_idx] = int((current_time - entry_time).total_seconds() / 60)
                    background_color = (0.8, 1, 0.8)  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω
                    text_color = (0, 0.4, 0, 1.0)  # –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π —Ç–µ–∫—Å—Ç
                    set_cell_colors(background_color, text_color, data, row)

                else:
                    row[result_idx] = '–û–∂–∏–¥–∞–Ω–∏–µ'
                    background_color = (1, 1, 0.8)  # –°–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π —Ñ–æ–Ω
                    text_color = (0.4, 0.4, 0, 1.0) # –¢–µ–º–Ω–æ-–∂–µ–ª—Ç—ã–π —Ç–µ–∫—Å—Ç
                    set_cell_colors(background_color, text_color, data, row)


            if signal_type == 'üü¢ LONG':
                if entry_price <= stop_loss:
                    row[result_idx] = '–í—ã–±–∏—Ç–æ –ø–æ —Å—Ç–æ–ø –ª–æ—Å—Å—É'
                    row[time_result_idx] = current_time.strftime("%Y-%m-%d %H:%M")
                    row[deadline_idx] = int((current_time - entry_time).total_seconds() / 60)
                    background_color = (1, 0.8, 0.8)  # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω
                    text_color = (0.4, 0, 0, 1.0)  # –¢–µ–º–Ω–æ-–∫—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç
                    set_cell_colors(background_color, text_color)
                elif entry_price >= take_profit:
                    row[result_idx] = '–°–¥–µ–ª–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
                    row[time_result_idx] = current_time.strftime("%Y-%m-%d %H:%M")
                    row[deadline_idx] = int((current_time - entry_time).total_seconds() / 60)
                    background_color = (0.8, 1, 0.8)  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω
                    text_color = (0, 0.4, 0, 1.0)  # –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π —Ç–µ–∫—Å—Ç
                    set_cell_colors(background_color, text_color, data, row)
                else:
                    row[result_idx] = '–û–∂–∏–¥–∞–Ω–∏–µ'
                    background_color = (1, 1, 0.8, 1.0)  # Light yellow background with full alpha
                    text_color = (0.4, 0.4, 0, 1.0)
                    set_cell_colors(background_color, text_color, data, row)
            ws.update_values(crange=(2, 1), values=data)
    except Exception as e:
        print(e)


def set_cell_colors(background_color, text_color, data, row):
    for i in col_arr:
        cell = ws.cell(f'{i}{data.index(row) + 2}')  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        cell.color = background_color  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
        cell.set_text_format('foregroundColor', text_color)
        cell.update()

def schedule_tasks():
    aioschedule.every(60).minutes.do(update_analytics)


async def main():
    schedule_tasks()    
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)
asyncio.run(main())